from telegram import Update
from telegram.ext import (
    Application, CommandHandler,MessageHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv
import os
from openai_api import call_openai
from convert_to_pdf import create_resume_from_ai_response

from run_model import predict, model_predict
import re
from parse_pdf import extract_pdf

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
telegram_token = os.getenv("TELEGRAM_TOKEN")


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–µ–±–µ —Ä–µ–∑—é–º–µ!\n–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–∫–∞–∂–∏:\n"
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏—é, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤, –ø—Ä–æ–ø—É—Å—Ç–∏ –µ–≥–æ."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_prompt = update.message.text
    user_doc = update.message.document
    state = False
    if user_doc is not None:
        state = True
        file = await context.bot.get_file(user_doc.file_id)
        file_path = f"{user_doc.file_name}"
        await file.download_to_drive(file_path)
        user_prompt = extract_pdf(file_path)
        if os.path.exists(file_path):
            os.remove(file_path)
    model, tokenizer = model_predict()

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    pattern = r'https?://[^\s<>"]+|www\.[^\s<>"]+|[^\s<>"]+\.[a-zA-Z]{2,}(?:/[^\s<>"]*)?'

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    def remove_urls(text):
        return re.sub(pattern, '', text)

    if user_doc is None:
        user_prompt = remove_urls(user_prompt)
        predictions = predict(model, tokenizer, user_prompt)

        if predictions == 0:
            await update.message.reply_text(f"–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é! —è –Ω–µ –ø–æ–Ω–∏–º–∞—é!\n–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–∫–∞–∂–∏:\n"
                                            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), "
                                            f"–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)")
            return
    try:
        response = await call_openai(user_prompt, state)
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
        result = create_resume_from_ai_response(response)

        # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ –∏–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        pdf_buffer, parsed_sections = result

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await update.message.reply_document(
            document=pdf_buffer,
            filename="resume.pdf",
            caption="–í–∞—à —à–∞–±–ª–æ–Ω —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –≥–æ—Ç–æ–≤!"
        )
        return
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! {e}")
        return




    # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    await query.edit_message_text("–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ‚úÖ")

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(telegram_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.PDF & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

# üîπ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import asyncio
    import sys

    if sys.platform.startswith('win') and sys.version_info >= (3, 8):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    import nest_asyncio
    nest_asyncio.apply()

    asyncio.run(main())

